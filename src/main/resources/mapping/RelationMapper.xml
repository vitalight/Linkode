<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linkode.dao.RelationMapper">
  <resultMap id="BaseResultMap" type="com.linkode.pojo.Relation">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="senderId" jdbcType="INTEGER" property="senderId" />
    <result column="receiverId" jdbcType="INTEGER" property="receiverId" />
    <result column="messages" jdbcType="INTEGER" property="messages" />
    <result column="likes" jdbcType="INTEGER" property="likes" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, senderId, receiverId, messages, likes
  </sql>
  <select id="selectByExample" parameterType="com.linkode.pojo.RelationExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from relation
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from relation
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.linkode.pojo.RelationExample">
    delete from relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.linkode.pojo.Relation">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into relation (senderId, receiverId, messages, 
      likes)
    values (#{senderId,jdbcType=INTEGER}, #{receiverId,jdbcType=INTEGER}, #{messages,jdbcType=INTEGER}, 
      #{likes,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.linkode.pojo.Relation">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into relation
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="senderId != null">
        senderId,
      </if>
      <if test="receiverId != null">
        receiverId,
      </if>
      <if test="messages != null">
        messages,
      </if>
      <if test="likes != null">
        likes,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="senderId != null">
        #{senderId,jdbcType=INTEGER},
      </if>
      <if test="receiverId != null">
        #{receiverId,jdbcType=INTEGER},
      </if>
      <if test="messages != null">
        #{messages,jdbcType=INTEGER},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.linkode.pojo.RelationExample" resultType="java.lang.Long">
    select count(*) from relation
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update relation
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.senderId != null">
        senderId = #{record.senderId,jdbcType=INTEGER},
      </if>
      <if test="record.receiverId != null">
        receiverId = #{record.receiverId,jdbcType=INTEGER},
      </if>
      <if test="record.messages != null">
        messages = #{record.messages,jdbcType=INTEGER},
      </if>
      <if test="record.likes != null">
        likes = #{record.likes,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update relation
    set id = #{record.id,jdbcType=INTEGER},
      senderId = #{record.senderId,jdbcType=INTEGER},
      receiverId = #{record.receiverId,jdbcType=INTEGER},
      messages = #{record.messages,jdbcType=INTEGER},
      likes = #{record.likes,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.linkode.pojo.Relation">
    update relation
    <set>
      <if test="senderId != null">
        senderId = #{senderId,jdbcType=INTEGER},
      </if>
      <if test="receiverId != null">
        receiverId = #{receiverId,jdbcType=INTEGER},
      </if>
      <if test="messages != null">
        messages = #{messages,jdbcType=INTEGER},
      </if>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.linkode.pojo.Relation">
    update relation
    set senderId = #{senderId,jdbcType=INTEGER},
      receiverId = #{receiverId,jdbcType=INTEGER},
      messages = #{messages,jdbcType=INTEGER},
      likes = #{likes,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>